//PlayerInput.FixedUpdate
void FixedUpdate()
{
	if (!this.Active)
	{
		return;
	}
	this.m_lastPressedButtonInput = -1;
	if(!OriTAS.TAS.UpdateTAS()) {
		Vector2 vector = UI.Cameras.Current.Camera.ScreenToViewportPoint(UnityEngine.Input.mousePosition);
		Core.Input.CursorMoved = (Vector2.Distance(vector, Core.Input.CursorPosition) > 0.0001f);
		Core.Input.CursorPosition = vector;
		Core.Input.HorizontalAnalogLeft = this.SimplifyAxis(this.HorizontalAnalogLeft.AxisValue());
		Core.Input.VerticalAnalogLeft = this.SimplifyAxis(this.VerticalAnalogLeft.AxisValue());
		this.ApplyDeadzone(ref Core.Input.HorizontalAnalogLeft, ref Core.Input.VerticalAnalogLeft);
		Core.Input.HorizontalAnalogRight = this.SimplifyAxis(this.HorizontalAnalogRight.AxisValue());
		Core.Input.VerticalAnalogRight = this.SimplifyAxis(this.VerticalAnalogRight.AxisValue());
		this.ApplyDeadzone(ref Core.Input.HorizontalAnalogRight, ref Core.Input.VerticalAnalogRight);
		Core.Input.HorizontalDigiPad = Mathf.RoundToInt(this.HorizontalDigiPad.AxisValue());
		Core.Input.VerticalDigiPad = Mathf.RoundToInt(this.VerticalDigiPad.AxisValue());
		Core.Input.AnyStart.Update(this.IsAnyStartPressed());
		Core.Input.ZoomIn.Update(this.ZoomIn.GetButton());
		Core.Input.ZoomOut.Update(this.ZoomOut.GetButton());
		Core.Input.LeftClick.Update(this.LeftClick.GetButton());
		Core.Input.RightClick.Update(this.RightClick.GetButton());

		for (int i = 0; i < this.m_allButtonInput.Count; i++)
		{
			bool button = this.m_allButtonInput[i].GetButton();
			if (button)
			{
				this.m_lastPressedButtonInput = i;
			}
			this.m_allButtonProcessor[i].Update(button);
		}
	}
	
	this.RefreshControls();
	if (!ControlsScreen.IsVisible && this.m_lastPressedButtonInput != -1)
	{
		bool flag = this.WasKeyboardUsedLast;
		if (this.m_lastPressedButtonInput != -1)
		{
			flag = this.KeyboardUsedLast(this.m_allButtonInput[this.m_lastPressedButtonInput]);
		}
		if (flag != this.WasKeyboardUsedLast)
		{
			GameSettings.Instance.CurrentControlScheme = ((!flag) ? ControlScheme.Controller : GameSettings.Instance.KeyboardScheme);
		}
	}
}

//TraceGroundMovement.OnRecieveDamage
public void OnRecieveDamage(global::Damage damage)
{
	if (damage.Type == global::DamageType.Acid)
	{
		return;
	}
	TASInput lastInput = TAS.player.lastInput;
	float kickbackMultiplier;
	if (Vector3.Dot(this.Right, damage.Force) > 0f)
	{
		kickbackMultiplier = damage.Force.magnitude;
	}
	else
	{
		kickbackMultiplier = -damage.Force.magnitude;
	}
	if (lastInput != null)
	{
		if (lastInput.KBUp)
		{
			Debug.Log("Override KickBack to UP");
			kickbackMultiplier = -damage.Force.magnitude;
		}
		else if (lastInput.KBDown)
		{
			Debug.Log("Override kickback to DOWN.");
			kickbackMultiplier = damage.Force.magnitude;
		}
	}
	this.Kickback.ApplyKickback(kickbackMultiplier);
}